// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	auth "github.com/ALTA-CAPSTONE-GROUP1/e-proposal-BE/feature/auth"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// LogInLogic provides a mock function with given fields: id, password
func (_m *UseCase) LogInLogic(id string, password string) (auth.Core, error) {
	ret := _m.Called(id, password)

	var r0 auth.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (auth.Core, error)); ok {
		return rf(id, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) auth.Core); ok {
		r0 = rf(id, password)
	} else {
		r0 = ret.Get(0).(auth.Core)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignVallidationLogic provides a mock function with given fields: signID
func (_m *UseCase) SignVallidationLogic(signID string) (auth.SignCore, error) {
	ret := _m.Called(signID)

	var r0 auth.SignCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (auth.SignCore, error)); ok {
		return rf(signID)
	}
	if rf, ok := ret.Get(0).(func(string) auth.SignCore); ok {
		r0 = rf(signID)
	} else {
		r0 = ret.Get(0).(auth.SignCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
