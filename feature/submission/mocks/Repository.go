// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	submission "github.com/ALTA-CAPSTONE-GROUP1/e-proposal-BE/feature/submission"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteSubmissionByID provides a mock function with given fields: submissionID, userID
func (_m *Repository) DeleteSubmissionByID(submissionID int, userID string) error {
	ret := _m.Called(submissionID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(submissionID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindFileData provides a mock function with given fields: subID, fileName
func (_m *Repository) FindFileData(subID int, fileName string) bool {
	ret := _m.Called(subID, fileName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, string) bool); ok {
		r0 = rf(subID, fileName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindRequirement provides a mock function with given fields: userID, typeName, value
func (_m *Repository) FindRequirement(userID string, typeName string, value int) (submission.Core, error) {
	ret := _m.Called(userID, typeName, value)

	var r0 submission.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) (submission.Core, error)); ok {
		return rf(userID, typeName, value)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) submission.Core); ok {
		r0 = rf(userID, typeName, value)
	} else {
		r0 = ret.Get(0).(submission.Core)
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(userID, typeName, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertSubmission provides a mock function with given fields: newSub
func (_m *Repository) InsertSubmission(newSub submission.AddSubmissionCore) error {
	ret := _m.Called(newSub)

	var r0 error
	if rf, ok := ret.Get(0).(func(submission.AddSubmissionCore) error); ok {
		r0 = rf(newSub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllSubmissions provides a mock function with given fields: userID, pr
func (_m *Repository) SelectAllSubmissions(userID string, pr submission.GetAllQueryParams) ([]submission.AllSubmiisionCore, []submission.SubTypeChoices, error) {
	ret := _m.Called(userID, pr)

	var r0 []submission.AllSubmiisionCore
	var r1 []submission.SubTypeChoices
	var r2 error
	if rf, ok := ret.Get(0).(func(string, submission.GetAllQueryParams) ([]submission.AllSubmiisionCore, []submission.SubTypeChoices, error)); ok {
		return rf(userID, pr)
	}
	if rf, ok := ret.Get(0).(func(string, submission.GetAllQueryParams) []submission.AllSubmiisionCore); ok {
		r0 = rf(userID, pr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]submission.AllSubmiisionCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string, submission.GetAllQueryParams) []submission.SubTypeChoices); ok {
		r1 = rf(userID, pr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]submission.SubTypeChoices)
		}
	}

	if rf, ok := ret.Get(2).(func(string, submission.GetAllQueryParams) error); ok {
		r2 = rf(userID, pr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectSubmissionByID provides a mock function with given fields: submissionID, userID
func (_m *Repository) SelectSubmissionByID(submissionID int, userID string) (submission.GetSubmissionByIDCore, error) {
	ret := _m.Called(submissionID, userID)

	var r0 submission.GetSubmissionByIDCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (submission.GetSubmissionByIDCore, error)); ok {
		return rf(submissionID, userID)
	}
	if rf, ok := ret.Get(0).(func(int, string) submission.GetSubmissionByIDCore); ok {
		r0 = rf(submissionID, userID)
	} else {
		r0 = ret.Get(0).(submission.GetSubmissionByIDCore)
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(submissionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataByOwner provides a mock function with given fields: _a0
func (_m *Repository) UpdateDataByOwner(_a0 submission.UpdateCore) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(submission.UpdateCore) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
