// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	approve "github.com/ALTA-CAPSTONE-GROUP1/e-proposal-BE/feature/admin/approve"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// SelectSubmissionByHyperApproval provides a mock function with given fields: userID, id, token
func (_m *Repository) SelectSubmissionByHyperApproval(userID string, id int, token string) (approve.GetSubmissionByIDCore, error) {
	ret := _m.Called(userID, id, token)

	var r0 approve.GetSubmissionByIDCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, string) (approve.GetSubmissionByIDCore, error)); ok {
		return rf(userID, id, token)
	}
	if rf, ok := ret.Get(0).(func(string, int, string) approve.GetSubmissionByIDCore); ok {
		r0 = rf(userID, id, token)
	} else {
		r0 = ret.Get(0).(approve.GetSubmissionByIDCore)
	}

	if rf, ok := ret.Get(1).(func(string, int, string) error); ok {
		r1 = rf(userID, id, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByHyperApproval provides a mock function with given fields: userID, input
func (_m *Repository) UpdateByHyperApproval(userID string, input approve.Core) error {
	ret := _m.Called(userID, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, approve.Core) error); ok {
		r0 = rf(userID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
