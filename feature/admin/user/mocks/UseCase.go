// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	user "github.com/ALTA-CAPSTONE-GROUP1/e-proposal-BE/feature/admin/user"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: id
func (_m *UseCase) DeleteUser(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUser provides a mock function with given fields: limit, offset, name
func (_m *UseCase) GetAllUser(limit int, offset int, name string) ([]user.Core, error) {
	ret := _m.Called(limit, offset, name)

	var r0 []user.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]user.Core, error)); ok {
		return rf(limit, offset, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []user.Core); ok {
		r0 = rf(limit, offset, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(limit, offset, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: id
func (_m *UseCase) GetUserById(id string) (user.Core, error) {
	ret := _m.Called(id)

	var r0 user.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (user.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) user.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(user.Core)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: newUser
func (_m *UseCase) RegisterUser(newUser user.Core) error {
	ret := _m.Called(newUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.Core) error); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: id, updateUser
func (_m *UseCase) UpdateUser(id string, updateUser user.Core) error {
	ret := _m.Called(id, updateUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, user.Core) error); ok {
		r0 = rf(id, updateUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
