// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	subtype "github.com/ALTA-CAPSTONE-GROUP1/e-proposal-BE/feature/admin/subtype"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// AddSubTypeLogic provides a mock function with given fields: newType
func (_m *UseCase) AddSubTypeLogic(newType subtype.Core) error {
	ret := _m.Called(newType)

	var r0 error
	if rf, ok := ret.Get(0).(func(subtype.Core) error); ok {
		r0 = rf(newType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubTypeLogic provides a mock function with given fields: subTypeName
func (_m *UseCase) DeleteSubTypeLogic(subTypeName string) error {
	ret := _m.Called(subTypeName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(subTypeName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSubTypesLogic provides a mock function with given fields: limit, offset, search
func (_m *UseCase) GetSubTypesLogic(limit int, offset int, search string) ([]subtype.GetSubmissionTypeCore, []subtype.GetPosition, error) {
	ret := _m.Called(limit, offset, search)

	var r0 []subtype.GetSubmissionTypeCore
	var r1 []subtype.GetPosition
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]subtype.GetSubmissionTypeCore, []subtype.GetPosition, error)); ok {
		return rf(limit, offset, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []subtype.GetSubmissionTypeCore); ok {
		r0 = rf(limit, offset, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]subtype.GetSubmissionTypeCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) []subtype.GetPosition); ok {
		r1 = rf(limit, offset, search)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]subtype.GetPosition)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(limit, offset, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
