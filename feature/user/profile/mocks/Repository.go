// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	profile "github.com/ALTA-CAPSTONE-GROUP1/e-proposal-BE/feature/user/profile"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Profile provides a mock function with given fields: id
func (_m *Repository) Profile(id string) (profile.Core, error) {
	ret := _m.Called(id)

	var r0 profile.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (profile.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) profile.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(profile.Core)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: id, input
func (_m *Repository) UpdateUser(id string, input profile.Core) error {
	ret := _m.Called(id, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, profile.Core) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
