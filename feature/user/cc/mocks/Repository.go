// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	cc "github.com/ALTA-CAPSTONE-GROUP1/e-proposal-BE/feature/user/cc"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAllCc provides a mock function with given fields: userID
func (_m *Repository) GetAllCc(userID string) ([]cc.CcCore, error) {
	ret := _m.Called(userID)

	var r0 []cc.CcCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]cc.CcCore, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []cc.CcCore); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cc.CcCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
